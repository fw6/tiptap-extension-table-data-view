diff --git a/build/lib/core/table.d.ts b/build/lib/core/table.d.ts
index b2471a9819f4d446e9e0fe41df96e4ec65886936..4159b0cd78c2dac1b4cd768c3452b36933e4e84b 100644
--- a/build/lib/core/table.d.ts
+++ b/build/lib/core/table.d.ts
@@ -31,6 +31,7 @@ export interface CoreOptions<TData extends RowData> {
     columns: ColumnDef<TData, any>[];
     defaultColumn?: Partial<ColumnDef<TData, unknown>>;
     renderFallbackValue: any;
+    features?: TableFeature[];
 }
 export interface CoreInstance<TData extends RowData> {
     initialState: TableState;
diff --git a/build/lib/core/table.js b/build/lib/core/table.js
index a382a2d55a53edbf75d0c23f54d6db6e966de90e..e8ee797295c8f74b03cd5d8754e11de4bdac3c35 100644
--- a/build/lib/core/table.js
+++ b/build/lib/core/table.js
@@ -36,7 +36,7 @@ function createTable(options) {
     console.info('Creating Table Instance...');
   }
   let table = {
-    _features: features
+    _features: [...features, ...(options.features || [])]
   };
   const defaultOptions = table._features.reduce((obj, feature) => {
     return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));
diff --git a/build/lib/index.esm.js b/build/lib/index.esm.js
index ce40b839c601cd66fc596a2d80e7ad889e4f8895..8983c17230f76fca20a868ea2f03cb5037b06eda 100644
--- a/build/lib/index.esm.js
+++ b/build/lib/index.esm.js
@@ -1059,7 +1059,7 @@ const Filters = {
       getFilterFn: () => {
         var _table$options$filter, _table$options$filter2;
         return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn()
-        // @ts-ignore 
+        // @ts-ignore
         : (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];
       },
       getCanFilter: () => {
@@ -2604,7 +2604,7 @@ function createTable(options) {
     console.info('Creating Table Instance...');
   }
   let table = {
-    _features: features
+    _features: [...features, ...(options.features || [])]
   };
   const defaultOptions = table._features.reduce((obj, feature) => {
     return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));
diff --git a/build/lib/index.mjs b/build/lib/index.mjs
index 56e8dbb097bbf3f8f65a4979390c5ee7abd80c6d..bea91bf4e8a7b0bf40f09746de7ed7c9d727a48c 100644
--- a/build/lib/index.mjs
+++ b/build/lib/index.mjs
@@ -1059,7 +1059,7 @@ const Filters = {
       getFilterFn: () => {
         var _table$options$filter, _table$options$filter2;
         return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn()
-        // @ts-ignore 
+        // @ts-ignore
         : (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];
       },
       getCanFilter: () => {
@@ -2604,7 +2604,7 @@ function createTable(options) {
     console.info('Creating Table Instance...');
   }
   let table = {
-    _features: features
+    _features: [...features, ...(options.features || [])]
   };
   const defaultOptions = table._features.reduce((obj, feature) => {
     return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));
diff --git a/build/umd/index.development.js b/build/umd/index.development.js
index 0372ebb739db5e70e5b7611ed75e2ce2d47496c1..3456ed5ae4196c4f0b0a285314dbf465f7e3883f 100644
--- a/build/umd/index.development.js
+++ b/build/umd/index.development.js
@@ -1064,7 +1064,7 @@
         getFilterFn: () => {
           var _table$options$filter, _table$options$filter2;
           return isFunction(column.columnDef.filterFn) ? column.columnDef.filterFn : column.columnDef.filterFn === 'auto' ? column.getAutoFilterFn()
-          // @ts-ignore 
+          // @ts-ignore
           : (_table$options$filter = (_table$options$filter2 = table.options.filterFns) == null ? void 0 : _table$options$filter2[column.columnDef.filterFn]) != null ? _table$options$filter : filterFns[column.columnDef.filterFn];
         },
         getCanFilter: () => {
@@ -2609,7 +2609,7 @@
       console.info('Creating Table Instance...');
     }
     let table = {
-      _features: features
+      _features: [...features, ...(options.features || [])]
     };
     const defaultOptions = table._features.reduce((obj, feature) => {
       return Object.assign(obj, feature.getDefaultOptions == null ? void 0 : feature.getDefaultOptions(table));
diff --git a/src/core/table.ts b/src/core/table.ts
index c9339ab78e4c309e7c72527b1b32db182b689822..5902130c9443960cc32bae0f87275949efeb4380 100644
--- a/src/core/table.ts
+++ b/src/core/table.ts
@@ -1,20 +1,20 @@
 import { functionalUpdate, memo, RequiredKeys } from '../utils'
 
 import {
-  Updater,
-  TableOptionsResolved,
-  TableState,
-  Table,
-  InitialTableState,
-  Row,
-  Column,
-  RowModel,
-  ColumnDef,
-  TableOptions,
-  RowData,
-  TableMeta,
-  ColumnDefResolved,
-  GroupColumnDef,
+    Column,
+    ColumnDef,
+    ColumnDefResolved,
+    GroupColumnDef,
+    InitialTableState,
+    Row,
+    RowData,
+    RowModel,
+    Table,
+    TableMeta,
+    TableOptions,
+    TableOptionsResolved,
+    TableState,
+    Updater,
 } from '../types'
 
 //
@@ -84,6 +84,7 @@ export interface CoreOptions<TData extends RowData> {
   columns: ColumnDef<TData, any>[]
   defaultColumn?: Partial<ColumnDef<TData, unknown>>
   renderFallbackValue: any
+  features?: TableFeature[]
 }
 
 export interface CoreInstance<TData extends RowData> {
@@ -116,7 +117,9 @@ export function createTable<TData extends RowData>(
     console.info('Creating Table Instance...')
   }
 
-  let table = { _features: features } as unknown as Table<TData>
+  let table = {
+    _features: [...features, ...(options.features || [])],
+  } as unknown as Table<TData>
 
   const defaultOptions = table._features.reduce((obj, feature) => {
     return Object.assign(obj, feature.getDefaultOptions?.(table))